name: build

on: [push, pull_request]

jobs:
  linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler:
          - pkg: g++-7
            exe: g++-7
          - pkg: g++-8
            exe: g++-8
          - pkg: g++-9
            exe: g++-9
          - pkg: g++-10
            exe: g++-10
          - pkg: clang-8
            exe: clang++-8
          - pkg: clang-9
            exe: clang++-9
          - pkg: clang-10
            exe: clang++-10
          - pkg: clang-11
            exe: clang++-11
          - pkg: clang-12
            exe: clang++-12

    steps:
    - uses: actions/checkout@v3

    - name: Install compiler
      run: |
        sudo apt update
        sudo apt install -y ${{ matrix.compiler.pkg }}

    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler.exe }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest


  linux-extra:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [g++, clang++]
        cxx_std: [17, 20]

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_CXX_STANDARD=${{ matrix.cxx_std }} -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest

  macos:
    runs-on: macOS-latest

    strategy:
      matrix:
        use_omp: [true, false]

    steps:
    - uses: actions/checkout@v3

    - name: Install OpenMP
      run: brew install libomp
      if: ${{ matrix.use_omp }}

    - name: Configure CMake
      env:
        CXX: ${{ matrix.compiler }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DXPU_BUILD_TESTS=ON -DXPU_BUILD_EXAMPLES=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build -j4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: ctest
